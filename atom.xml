<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MeetIn</title>
  <subtitle>Blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://meetinco.github.io/"/>
  <updated>2016-10-10T06:55:56.000Z</updated>
  <id>http://meetinco.github.io/</id>
  
  <author>
    <name>MeetIn</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信本地开发环境</title>
    <link href="http://meetinco.github.io/2016/10/08/2016-10-08-wei-xin-ben-di-kai-fa-huan-jing/"/>
    <id>http://meetinco.github.io/2016/10/08/2016-10-08-wei-xin-ben-di-kai-fa-huan-jing/</id>
    <published>2016-10-08T08:04:29.000Z</published>
    <updated>2016-10-10T06:55:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>借助ngrok实现微信本地开发<br><a id="more"></a></p>
<h2 id="ngrok的安装和使用"><a href="#ngrok的安装和使用" class="headerlink" title="ngrok的安装和使用"></a>ngrok的安装和使用</h2><p>请到<a href="https://ngrok.com/download" target="_blank" rel="external">这里</a>下载安装，查阅<a href="https://ngrok.com/docs#config-location" target="_blank" rel="external">文档</a><br>以Mac为例：  </p>
<ol>
<li><p>将下载的ngrok文件copy到 <code>/usr/local/bin/</code> 目录下<br> windows拷到C:\Windows\System32目录下</p>
</li>
<li><p>在以下位置创建ngrok.yml 文件</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">	OS X		/Users/example/.ngrok2/ngrok.yml</div><div class="line">	Linux		/home/example/.ngrok2/ngrok.yml</div><div class="line">	Windows		C:\Users\example\.ngrok2\ngrok.yml</div><div class="line">	```  </div><div class="line">	windows可用命令md .ngrok2创建点开头的文件夹</div><div class="line"></div><div class="line">3. 修改ngrok.yml内容为</div></pre></td></tr></table></figure>
<p> tunnels:</p>
<pre><code>meetin_service:
    proto: http
    inspect: false
    addr: 8080
</code></pre> <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">## 微信开发环境配置</div><div class="line">1. 获得自己的[测试公众号](https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login)</div><div class="line">2. 修改接口配置信息(具体的数值请询问公众号管理员)</div></pre></td></tr></table></figure>
<p> URL        xxxxx<br> Token    xxxxx</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">3. 设置权限表中-&gt;网页服务-&gt;网页账号-&gt;网页授权获取用户基本信息的回调域名为 `www.meetin.co`</div><div class="line">4. 打开工程 `meetin_web_node`，找到文件 `global_local.js`</div><div class="line">5. `global_local.js`文件下方，加入自己的逻辑</div></pre></td></tr></table></figure>
<p> if (process.env.USER == ‘gukong’) {</p>
<pre><code> configure.wx_appid = &apos;xxxxxx&apos;;//这是开发公众号
configure.wx_secret = &apos;xxxxxxx&apos;;
configure.wx_self = &apos;xxxxxx&apos;;//测试公众号的微信号
</code></pre><p> }<br> else if (process.env.USER == ‘example’) {</p>
<pre><code>configure.wx_appid = &apos;xxx&apos;;
configure.wx_secret = &apos;xxx&apos;;
configure.wx_self = &apos;xxx&apos;;
</code></pre><p> }<br> else {</p>
<pre><code>configure.wx_appid = &apos;&apos;;
configure.wx_secret = &apos;&apos;;
</code></pre><p> }</p>
 <figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">6. 配置环境变量`USER`为自己的名字</div><div class="line">7. 在 `app.js` 文件启动的 `start_ngrok.js`，只有在本地开发环境才会启动，ngrok服务启动后，会修改`gConfig.host`为获取到的url，分享的会议可以直接扫码打开（微信授权成功）</div></pre></td></tr></table></figure>
<p> try to get public url 1<br> try to get public url 2<br> <a href="http://8e422a4e.ngrok.io" target="_blank" rel="external">http://8e422a4e.ngrok.io</a><br> nate-log postAsync:xxxxxxxxxxxxxxxxxx<br> nate-log postAsync error null<br> nate-log body: success<br> success<br> ```</p>
</li>
<li>微信本地开发，只能与自己的测试公众号交互</li>
</ol>
<h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><p><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/wechat_dev.png?imageMogr2/thumbnail/300000@" alt="image"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;借助ngrok实现微信本地开发&lt;br&gt;
    
    </summary>
    
      <category term="教程" scheme="http://meetinco.github.io/categories/%E6%95%99%E7%A8%8B/"/>
    
    
      <category term="微信" scheme="http://meetinco.github.io/tags/%E5%BE%AE%E4%BF%A1/"/>
    
      <category term="ngrok" scheme="http://meetinco.github.io/tags/ngrok/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号开发以及微信开发环境注意事项</title>
    <link href="http://meetinco.github.io/2016/09/13/2016-09-13-wei-xin-gong-zhong-hao-kai-fa-yi-ji-wei-xin-kai-fa-huan-jing-zhu-yi-shi-xiang/"/>
    <id>http://meetinco.github.io/2016/09/13/2016-09-13-wei-xin-gong-zhong-hao-kai-fa-yi-ji-wei-xin-kai-fa-huan-jing-zhu-yi-shi-xiang/</id>
    <published>2016-09-13T09:46:44.000Z</published>
    <updated>2016-09-13T12:42:04.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/wechat.png?imageMogr2/thumbnail/300000@" alt="image"><br>微信公众号开发其实不难<br>但是开发的过程并不顺利，主要还是因为微信对访问的端口有限制（http支持80端口，https支持443端口）<br>开发的时候没有想清楚，导致了很多不必要的失误</p>
<a id="more"></a>
<h2 id="接口配置"><a href="#接口配置" class="headerlink" title="接口配置"></a>接口配置</h2><p><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/server_url_conf.png?imageMogr2/thumbnail/300000@" alt="image"><br>配置的<code>url</code>供微信主动调用  </p>
<h3 id="GET-请求"><a href="#GET-请求" class="headerlink" title="GET 请求"></a><code>GET</code> 请求</h3><p>微信会验证当前的url是否可用, 验证方法就是向填写的url发送<code>GET</code>请求<br>若确认此次GET请求来自微信服务器，原样返回echostr参数内容<br>如何确认这是一次有效的验证请求呢？<br>官方示例代码是PHP，在此贴出JavaScript代码以供参考  </p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">//返回true，表示验证通过</div><div class="line">function x_verifyToken(timestamp, nonce, signature) &#123;</div><div class="line">    var token = &apos;meetinisgood&apos;;</div><div class="line">    var array = [token, timestamp, nonce];</div><div class="line">    var key = array.sort ().join (&apos;&apos;);</div><div class="line">    var sha1 = crypto.createHash(&apos;sha1&apos;).update (key).digest (&apos;hex&apos;);</div><div class="line">    // sha1 处理结束</div><div class="line">    return sha1 == signature</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</code></pre><h3 id="POST-请求"><a href="#POST-请求" class="headerlink" title="POST 请求"></a><code>POST</code> 请求</h3><p>用户的操作均通过<code>POST</code>请求到达我们自己的服务器<br>这里需要关心的是用户到底进行了什么操作？<br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/wechat_event_info.png?imageMogr2/thumbnail/300000@" alt="image"><br>大部分通知都带有以上参数，请阅读相关章节了解上述参数可能的取值<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140453&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">接收普通消息</a><br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140454&amp;token=&amp;lang=zh_CN" target="_blank" rel="external">接收事件推送</a>  </p>
<h2 id="access-token-机制"><a href="#access-token-机制" class="headerlink" title="access_token 机制"></a>access_token 机制</h2><p>为了保密appsecrect，第三方需要一个access_token获取和刷新的中控服务器<br>我们会设置菜单按钮或向用户推送消息等等，这些都必须要access_token<br>access_token 有一个特点就是，<strong>一旦重新获取access_token，原来的access_token就失效</strong><br>这引出了一个问题:<br>&emsp;&emsp;正式环境和开发环境如何分别使用access_token?  </p>
<h3 id="正式环境和开发环境分别使用access-token"><a href="#正式环境和开发环境分别使用access-token" class="headerlink" title="正式环境和开发环境分别使用access_token"></a>正式环境和开发环境分别使用access_token</h3><p>微信提供了一个工具：<br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/wechat_test_account.png?imageMogr2/thumbnail/300000@" alt="image"><br>这就意味着你拥有两个公众号，而且该测试公众号的接口权限全开<br>正式环境使用正式的公众号，开发环境使用测试公众号<br>但是这里还有一个问题：<br>&emsp;&emsp;微信只访问80端口（http）和443端口（https），如果正式环境和测试环境使用了不同的端口，如何把属于开发环境的微信请求从80端口转到8080端口（开发环境端口）呢？  </p>
<h3 id="把属于开发环境的微信请求从80端口转到8080端口"><a href="#把属于开发环境的微信请求从80端口转到8080端口" class="headerlink" title="把属于开发环境的微信请求从80端口转到8080端口"></a>把属于开发环境的微信请求从80端口转到8080端口</h3><p>这里就需要后台同学的支持了  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">Nate：同学，帮我搞一个端口转发呗</div><div class="line">Arden：转发规则是什么嘛</div><div class="line">Nate：80端口 /dev_wechat 下的请求转发到8080端口下的 /wechat，谢谢哈</div><div class="line">Arden：说馁些，不存在，没得似的</div></pre></td></tr></table></figure>
<p>后台同学配置好端口转发之后，我们还需要做什么工作才能让开发环境收到来自微信的问候（token 验证）呢？  </p>
<ol>
<li>正式公众号的服务器URL配置成：<a href="http://xxx.com/wechat" target="_blank" rel="external">http://xxx.com/wechat</a>  </li>
<li>测试公众号的服务器URL配置成：<a href="http://xxx.com/dev_wechat" target="_blank" rel="external">http://xxx.com/dev_wechat</a>  </li>
<li>下面还会提到<code>wechat</code>和<code>dev_wechat</code><br>这样开发环境就可以收到来自微信的问候了~~~  </li>
</ol>
<hr>
<p>这样就够了吗？ NO~<br>被坑过的我告诉你还有一项需要注意<br>为了让html页面可以拿到用户的wx_openid，需要以下步骤：  </p>
<ol>
<li>用户访问HTML页面，这次访问的url: <code>http://xxx.com/aaa/bb.html?name=xxx</code></li>
<li>没有发现参数 wx_openid</li>
<li>重定向到 <code>http://xxx.com/wechat/request_openid</code><br>携带参数  redirect_url=<code>URLEncoding(&#39;http://xxx.com/aaa/bb.html?name=xxx&#39;)</code></li>
<li>组装一个回调url：redirect_url_1 = <code>URLEncoding(&#39;http://xxx.com/wechat/code?redirect=URLEncoding(redirect_url)&#39;)</code></li>
<li>重定向到微信请求code（传入一个回调url：redirect_url_1）  </li>
<li>微信将code发送到redirect_url_1</li>
<li>可以取到参数<code>redirect_url</code><br>向微信发送http请求，传入code<br>异步返回用户的信息（openid）<br>再次重定向到用户原来访问的url: <code>redirect_url</code>（追加了参数wx_openid）</li>
</ol>
<p><strong>看图理解</strong><br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/wechat_request_openid.png?imageMogr2/thumbnail/300000@" alt="image"><br>说了一大堆获取wx_openid的步骤，就是为了指出其中一个容易搞混的地方<br>注意图中 <code>绿色的wechat</code><br>正式环境使用 <code>wechat</code>， 开发环境使用<code>dev_wechat</code>（已经说过 wechat 和 dev_wechat 是什么啦）<br>好了，就这样。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://7xtaiq.com1.z0.glb.clouddn.com/image/wechat.png?imageMogr2/thumbnail/300000@&quot; alt=&quot;image&quot;&gt;&lt;br&gt;微信公众号开发其实不难&lt;br&gt;但是开发的过程并不顺利，主要还是因为微信对访问的端口有限制（http支持80端口，https支持443端口）&lt;br&gt;开发的时候没有想清楚，导致了很多不必要的失误&lt;/p&gt;
    
    </summary>
    
      <category term="前端" scheme="http://meetinco.github.io/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
      <category term="微信公众号" scheme="http://meetinco.github.io/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7/"/>
    
      <category term="WeChat" scheme="http://meetinco.github.io/tags/WeChat/"/>
    
      <category term="ngnix" scheme="http://meetinco.github.io/tags/ngnix/"/>
    
  </entry>
  
  <entry>
    <title>Xcode auto release</title>
    <link href="http://meetinco.github.io/2016/06/04/Xcode-auto-release/"/>
    <id>http://meetinco.github.io/2016/06/04/Xcode-auto-release/</id>
    <published>2016-06-04T10:25:05.000Z</published>
    <updated>2016-06-04T11:41:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>曾使用过Xcode上传release包，平均耗时 1h，全程人工参与<br>曾使用过Application Loader上传release包，平均耗时 20min，全程人工参与<br>现在使用automator制作的自动传包工具AutoLoader，平均耗时 10min，人工参与2s</p>
<p><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/xcode-service.png?imageMogr2/thumbnail/100000@" alt="image"></p>
<a id="more"></a>
<h2 id="自动打包"><a href="#自动打包" class="headerlink" title="自动打包"></a>自动打包</h2><p>网上已经有许多开发者共享的打包脚本，只要输入一个命令就可以自动打包、发布、邮件通知。<br>但是最近发现，一个简单的方法，可以让我们变得更懒一些。</p>
<h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>这里不会专门讲解以下知识（因为你不需要这些知识也可以使用本文提供的工具），请自行了解  </p>
<ol>
<li>使用 automator <a href="https://www.raywenderlich.com/58986/automator-for-mac-tutorial-and-examples" target="_blank" rel="external">Automator for Mac OS X: Tutorial and Examples</a>  </li>
<li>使用 shell script <a href="https://github.com/qinjx/30min_guides/blob/master/shell.md" target="_blank" rel="external">Shell脚本编程30分钟入门</a>  </li>
<li>使用 applescript <a href="https://developer.apple.com/library/mac/documentation/AppleScript/Conceptual/AppleScriptLangGuide/introduction/ASLR_intro.html" target="_blank" rel="external">Introduction to AppleScript Language Guide</a>  </li>
<li>xcodebuild <a href="https://developer.apple.com/legacy/library/documentation/Darwin/Reference/ManPages/man1/xcodebuild.1.html" target="_blank" rel="external">xcodebuild 手册</a>  </li>
<li>Application Loader altool <a href="http://help.apple.com/itc/apploader/#/apdATD1E53-D1E1A1303-D1E53A1126" target="_blank" rel="external">altool 手册</a></li>
</ol>
<h2 id="使用xcodebuild打包"><a href="#使用xcodebuild打包" class="headerlink" title="使用xcodebuild打包"></a>使用xcodebuild打包</h2><p><strong>xcodebuild</strong><br>打包、导出ipa都是使用的 xcodebuild<br>可能你的工程需要指定 target，或者需要其他参数才能打出正确的包，了解一下xcodebuild还是很有必要的<br>代码中用到的exportOptionsPlist是一个plis配置文件，稍后可以下载到</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#xcodebuild 简单示例</div><div class="line">#build clean</div><div class="line">xcodebuild clean -configuration &quot;$configuration&quot; -alltargets</div><div class="line"></div><div class="line">#archive</div><div class="line">xcodebuild archive -workspace &quot;$workspaceName&quot; -scheme &quot;$scheme&quot; -configuration &quot;$configuration&quot; -archivePath $&#123;archivePath&#125;/$&#123;archiveName&#125;.xcarchive CODE_SIGN_IDENTITY=&quot;$codeSignIdentity&quot; PROVISIONING_PROFILE=&quot;$appStoreProvisioningProfile&quot;</div><div class="line"></div><div class="line">#导出到ipa</div><div class="line">xcodebuild -exportArchive -archivePath $&#123;archivePath&#125;/$&#123;archiveName&#125;.xcarchive -exportOptionsPlist &quot;$exportOptionsPlist&quot; -exportPath $&#123;archivePath&#125;/$&#123;archiveName&#125;</div></pre></td></tr></table></figure>
<h2 id="使用altool提交ipa"><a href="#使用altool提交ipa" class="headerlink" title="使用altool提交ipa"></a>使用altool提交ipa</h2><p><strong>Application Loader altool</strong><br>altool 位于 Application Loader，三个参数 ipapath、appleid、password<br>在这之前我都是使用的Application Loader上传包到 iTunesConnect</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">#altool 简单示例</div><div class="line">#validate</div><div class="line">&quot;$altoolPath&quot; --validate-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</div><div class="line"></div><div class="line">#upload</div><div class="line">&quot;$altoolPath&quot; --upload-app -f &quot;$ipaPath&quot; -u &quot;$appleid&quot; -p &quot;$applepassword&quot; -t ios --output-format xml</div></pre></td></tr></table></figure>
<h2 id="使用-Automator"><a href="#使用-Automator" class="headerlink" title="使用 Automator"></a>使用 Automator</h2><p>Automator创建的workflow可以和其他应用程序无缝衔接，在【服务】选项里面可以找到自己为某个目标定制的workflow。<br>使用Automator为xcode定制一个【服务】很简单，所以并没有考虑为xcode开发一个插件。  </p>
<ul>
<li><strong>打开Automator</strong></li>
<li><strong>新建一个service</strong><br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-new.png?imageMogr2/thumbnail/100000@" alt="image"></li>
<li><strong>修改服务需要的输入、选取需要服务的应用</strong><br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-edit1.png?imageView2/2/w/600" alt="image"></li>
<li><strong>加入流程一</strong><br>Automator应用界面左侧，打开资料库面板，点击【变量】，在搜索框中输入“path”，选择目标路径变量，拖拽到中间区域<br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-edit2.png?imageMogr2/thumbnail/100000@" alt="image"><br>拖拽到中间区域<br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-edit3.png?imageMogr2/thumbnail/100000@" alt="image"></li>
<li><strong>选取项目工程根路径</strong><br>在 Automator 应用界面的下方，双击刚才【Destination Path】，在弹出面板中选择工程路径，选择后点击【完成】<br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-edit4.png?imageMogr2/thumbnail/100000@" alt="image"></li>
<li><strong>加入流程二</strong><br>automator应用界面左侧，打开资料库面板，点击【操作】，在搜索框中输入“applescript”，选择运行AppleScript，拖拽到中间区域步骤1的下方<br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-edit5.png?imageMogr2/thumbnail/100000@" alt="image"><br>拖拽到中间区域<br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-edit6.png?imageMogr2/thumbnail/100000@" alt="image"></li>
<li><p><strong>编辑 Applescript</strong><br>在 代码框中输入以下内容  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line"> on run &#123;input, parameters&#125;tell application &quot;Terminal&quot;	activate	do script &quot;cd &quot; &amp; input &amp; &quot; &amp;&amp; . BuildScript/xcode-archive-release.sh&quot;end tellreturn input end run</div></pre></td></tr></table></figure>
<p>脚本文件 xcode-archive-release.sh 我放到了工程目录的 BuildScript 文件夹里面<br>这段 Applescript 脚本做的事就是 打开 Terminal，cd 到工程目录，运行BuildScript文件夹里面的脚本文件</p>
</li>
<li><p><strong>最终看起来是这个样子的</strong><br><img src="http://7xtaiq.com1.z0.glb.clouddn.com/image/automator-appstore.png?imageMogr2/thumbnail/100000@" alt="image"></p>
</li>
<li><p><strong>最后，保存文件，输入文件名字就可以了。打开xcode，看看是否有了新的 service 选项</strong></p>
</li>
</ul>
<h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul>
<li><a href="http://7xtdgs.com1.z0.glb.clouddn.com/BuildScript.zip" target="_blank" rel="external">上传到 iTunesconnect shell 脚本</a></li>
<li><a href="http://7xtdgs.com1.z0.glb.clouddn.com/%E5%8F%91%E5%B8%83%E8%87%B3AppStore.workflow.zip" target="_blank" rel="external">Automator workflow文件</a></li>
<li>下载的脚本文件解压后，放到项目里，与 xxx.xcworkspace（xxx.xcodeproj） 同一级</li>
<li>修改 xcode-archive-release.sh 里面的配置（见<strong>配置修改</strong>）</li>
<li>修改 release_exportOptions.plist 里面的 teamID</li>
<li>下载下来的 workflow 文件不用解压，用Automator打开，修改工程目录（参考<strong>使用 Automator</strong>）</li>
</ul>
<h2 id="配置修改"><a href="#配置修改" class="headerlink" title="配置修改"></a>配置修改</h2><p>打开 Terminal ,cd 到工程目录下，运行命令<code>xcodebuild -list</code>  </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><div class="line">$:xcodebuild -list</div><div class="line">Targets:</div><div class="line">        XXXXXX</div><div class="line">        XXXXXXTests</div><div class="line"></div><div class="line">    Build Configurations:</div><div class="line">        Debug</div><div class="line">        Release</div><div class="line"></div><div class="line">    If no build configuration is specified and -scheme is not passed then &quot;Release&quot; is used.</div><div class="line"></div><div class="line">    Schemes:</div><div class="line">        XXXXXX</div></pre></td></tr></table></figure>
<ul>
<li><p><strong>archiveName</strong><br>打包 archive 文件的名字（不用后缀）  </p>
</li>
<li><p><strong>workspaceName</strong><br>工程文件的名字（需要后缀）  </p>
</li>
<li><p><strong>scheme</strong><br>运行命令<code>xcodebuild -list</code>得到的<code>Schemes</code>，可能是一个列表，选一个你需要的  </p>
</li>
<li><p><strong>codeSignIdentity</strong><br>形如：iPhone Distribution: xxxx Inc. (xxxxxxx)<br>进入<code>Build Settings</code>, 编辑<code>Code Signing identity</code>成打release包需要的，再点击一下刚才选中的选项，弹出框中点击<code>Other</code>就可以获得形如<code>iPhone Distribution: xxxx Inc. (xxxxxxx)</code>的数据  </p>
</li>
<li><p><strong>appStoreProvisioningProfile</strong><br>形如：xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx<br>获取方法与上面类似，最终获得形如<code>xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxx</code>的数据  </p>
</li>
<li><p><strong>configuration</strong><br>值为：Release<br>运行命令<code>xcodebuild -list</code>得到的<code>Build Configurations</code>，有两个选项，打release包，所以值为Release  </p>
</li>
<li><p><strong>exportOptionsPlist</strong><br>存放release_exportOptions.plist文件的相对路径<br>如果下载到的BuildScript文件夹存放到项目根目录，其值为<code>BuildScript/release_exportOptions.plist</code>  </p>
</li>
<li><p><strong>ipaPath</strong><br>导出ipa文件的路径<br>altool工具回到该路径获取需要上传的ipa文件，其值应为<code>${PWD}/build/${archiveName}/${scheme}.ipa</code>  </p>
</li>
<li><p><strong>appleid</strong><br>开发者账号（邮箱）  </p>
</li>
<li><p><strong>applepassword</strong><br>开发者账号的密码</p>
</li>
</ul>
<h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文讲述了Automator工具创建自动化流程，这仅仅是Automator的一部分。<br>善用Automator，工作会更轻松。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;曾使用过Xcode上传release包，平均耗时 1h，全程人工参与&lt;br&gt;曾使用过Application Loader上传release包，平均耗时 20min，全程人工参与&lt;br&gt;现在使用automator制作的自动传包工具AutoLoader，平均耗时 10min，人工参与2s&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xtaiq.com1.z0.glb.clouddn.com/image/xcode-service.png?imageMogr2/thumbnail/100000@&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Xcode" scheme="http://meetinco.github.io/tags/Xcode/"/>
    
      <category term="automator" scheme="http://meetinco.github.io/tags/automator/"/>
    
      <category term="appscript" scheme="http://meetinco.github.io/tags/appscript/"/>
    
      <category term="shell script" scheme="http://meetinco.github.io/tags/shell-script/"/>
    
  </entry>
  
</feed>
